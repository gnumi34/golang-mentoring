basePath: /
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  request.AddUser:
    properties:
      email:
        type: string
      password_1:
        minLength: 8
        type: string
      password_2:
        minLength: 8
        type: string
      username:
        type: string
    required:
    - email
    - password_1
    - password_2
    - username
    type: object
  request.GetUser:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  request.LoginUser:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  request.UpdateUser:
    properties:
      email:
        type: string
      id:
        type: string
      password_1:
        type: string
      password_2:
        type: string
      username:
        type: string
    type: object
  users.UsersDomain:
    properties:
      created_At:
        type: string
      deleted_At:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: string
      password:
        type: string
      token:
        type: string
      updated_At:
        type: string
      username:
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: a simple Go library management with echo framework
  termsOfService: http://swagger.io/terms/
  title: Go Echo Library Management
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: If user is exists in the database, Generate and RETURN user token.
      parameters:
      - description: Login
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/request.LoginUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Login
      tags:
      - Login
  /user/protected:
    get:
      description: Protected route can only be accessed if the the user has valid
        JWT token.
      parameters:
      - default: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VySUQiOiJkMTk3YzY1Ny0zMDY1LTQ0MjYtYmY4ZS05YmJhYWYwYjY5MDciLCJleHAiOjE2NjA4NzQ3MjR9.FV-RV_55zOMO4qD1vjmY0m1ZmeRsvDfMchlbqXjcpkc
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: OK
      summary: Protected user route
      tags:
      - Protected
  /users/:
    post:
      consumes:
      - application/json
      description: Add new user to the database, ID is generated by the API, password  is
        saved with BCrypt hash after passess validation.
      parameters:
      - description: Add User
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/request.AddUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.UsersDomain'
      summary: Add user
      tags:
      - Add new user
    put:
      consumes:
      - application/json
      description: Update the user to the database.
      parameters:
      - description: Update User
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/request.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.UsersDomain'
      summary: Update User
      tags:
      - Update User
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Soft delete user by passing the user ID.
      parameters:
      - description: delete user
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete User
      tags:
      - (Soft) Delete User
  /users/get-user:
    post:
      consumes:
      - application/json
      description: validate username and password, if user is exists in the database
        RETURN valid user
      parameters:
      - description: validate user
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/request.GetUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Show an account
      tags:
      - GetUser
schemes:
- http
swagger: "2.0"
