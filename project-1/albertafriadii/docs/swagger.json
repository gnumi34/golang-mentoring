{
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "a simple Go library management with echo framework",
        "title": "Go Echo Library Management",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "version": "1.0"
    },
    "host": "localhost:1323",
    "basePath": "/",
    "paths": {
        "/user/": {
            "post": {
                "description": "Create new user to the database, ID is generated by the API, password  is saved with BCrypt hash after passess validation.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Create new user"
                ],
                "summary": "Create user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Users"
                        }
                    }
                }
            }
        },
        "/user/get": {
            "get": {
                "description": "validate username and password, if user is exists in the database RETURN valid user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GetUser"
                ],
                "summary": "Show an account",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/user/{user_id}": {
            "put": {
                "description": "Update the user to the database passing by user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Update User"
                ],
                "summary": "Update user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Users"
                        }
                    }
                }
            },
            "delete": {
                "description": "Soft delete user by passing the user ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "(Soft) Delete User"
                ],
                "summary": "Delete User",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.Users": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        }
    }
}