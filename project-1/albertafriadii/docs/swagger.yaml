basePath: /
definitions:
  domain.GetUser:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  domain.InputCreateUser:
    properties:
      email:
        type: string
      password_1:
        minLength: 8
        type: string
      password_2:
        minLength: 8
        type: string
      username:
        type: string
    required:
    - email
    - password_1
    - password_2
    - username
    type: object
  domain.InputUpdateUser:
    properties:
      email:
        type: string
      password_1:
        type: string
      password_2:
        type: string
      user_id:
        type: string
      username:
        type: string
    required:
    - email
    - username
    type: object
  domain.Users:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      password:
        minLength: 8
        type: string
      updated_at:
        type: string
      user_id:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
host: localhost:1323
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: a simple Go library management with echo framework
  termsOfService: http://swagger.io/terms/
  title: Go Echo Library Management
  version: "1.0"
paths:
  /user/:
    post:
      consumes:
      - application/json
      description: Create new user to the database, ID is generated by the API, password  is
        saved with BCrypt hash after passess validation.
      parameters:
      - description: create user
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/domain.InputCreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Users'
        "400":
          description: Bad Request
      summary: Create user
      tags:
      - Create new user
  /user/{user_id}:
    delete:
      consumes:
      - application/json
      description: Soft delete user by passing the user ID.
      parameters:
      - description: UserID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Users'
        "400":
          description: Bad Request
      summary: Delete User
      tags:
      - (Soft) Delete User
    put:
      consumes:
      - application/json
      description: Update the user to the database passing by user ID
      parameters:
      - description: update user
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/domain.InputUpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Users'
        "400":
          description: Bad Request
      summary: Update user
      tags:
      - Update User
  /user/get:
    get:
      consumes:
      - application/json
      description: validate username and password, if user is exists in the database
        RETURN valid user
      parameters:
      - description: validate user
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/domain.GetUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Show an account
      tags:
      - GetUser
schemes:
- http
swagger: "2.0"
