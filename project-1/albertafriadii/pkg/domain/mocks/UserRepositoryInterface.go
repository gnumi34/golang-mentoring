// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "golang-mentoring/project-1/albertafriadii/pkg/domain"

	mock "github.com/stretchr/testify/mock"
)

// UserRepositoryInterface is an autogenerated mock type for the UserRepositoryInterface type
type UserRepositoryInterface struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, u
func (_m *UserRepositoryInterface) CreateUser(ctx context.Context, u *domain.Users) (*domain.Users, error) {
	ret := _m.Called(ctx, u)

	var r0 *domain.Users
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Users) *domain.Users); ok {
		r0 = rf(ctx, u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Users)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Users) error); ok {
		r1 = rf(ctx, u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, UserID
func (_m *UserRepositoryInterface) DeleteUser(ctx context.Context, UserID string) error {
	ret := _m.Called(ctx, UserID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, UserID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUser provides a mock function with given fields: ctx, UserID
func (_m *UserRepositoryInterface) GetUser(ctx context.Context, UserID string) (*domain.Users, error) {
	ret := _m.Called(ctx, UserID)

	var r0 *domain.Users
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Users); ok {
		r0 = rf(ctx, UserID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Users)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, UserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: ctx, Username
func (_m *UserRepositoryInterface) LoginUser(ctx context.Context, Username string) (*domain.Users, error) {
	ret := _m.Called(ctx, Username)

	var r0 *domain.Users
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Users); ok {
		r0 = rf(ctx, Username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Users)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, Username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, u, UserID
func (_m *UserRepositoryInterface) UpdateUser(ctx context.Context, u *domain.Users, UserID string) error {
	ret := _m.Called(ctx, u, UserID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Users, string) error); ok {
		r0 = rf(ctx, u, UserID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepositoryInterface creates a new instance of UserRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepositoryInterface(t mockConstructorTestingTNewUserRepositoryInterface) *UserRepositoryInterface {
	mock := &UserRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
