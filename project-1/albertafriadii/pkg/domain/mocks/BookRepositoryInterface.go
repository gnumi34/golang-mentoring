// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "golang-mentoring/project-1/albertafriadii/pkg/domain"

	mock "github.com/stretchr/testify/mock"
)

// BookRepositoryInterface is an autogenerated mock type for the BookRepositoryInterface type
type BookRepositoryInterface struct {
	mock.Mock
}

// BorrowBook provides a mock function with given fields: ctx, bb
func (_m *BookRepositoryInterface) BorrowBook(ctx context.Context, bb domain.BorrowBook) (domain.BorrowBook, error) {
	ret := _m.Called(ctx, bb)

	var r0 domain.BorrowBook
	if rf, ok := ret.Get(0).(func(context.Context, domain.BorrowBook) domain.BorrowBook); ok {
		r0 = rf(ctx, bb)
	} else {
		r0 = ret.Get(0).(domain.BorrowBook)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.BorrowBook) error); ok {
		r1 = rf(ctx, bb)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBook provides a mock function with given fields: ctx, b
func (_m *BookRepositoryInterface) CreateBook(ctx context.Context, b domain.Book) (domain.Book, error) {
	ret := _m.Called(ctx, b)

	var r0 domain.Book
	if rf, ok := ret.Get(0).(func(context.Context, domain.Book) domain.Book); ok {
		r0 = rf(ctx, b)
	} else {
		r0 = ret.Get(0).(domain.Book)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Book) error); ok {
		r1 = rf(ctx, b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBook provides a mock function with given fields: ctx, BookID
func (_m *BookRepositoryInterface) DeleteBook(ctx context.Context, BookID string) error {
	ret := _m.Called(ctx, BookID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, BookID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LendedBook provides a mock function with given fields: ctx, lb
func (_m *BookRepositoryInterface) LendedBook(ctx context.Context, lb domain.LendBook) (domain.LendBook, error) {
	ret := _m.Called(ctx, lb)

	var r0 domain.LendBook
	if rf, ok := ret.Get(0).(func(context.Context, domain.LendBook) domain.LendBook); ok {
		r0 = rf(ctx, lb)
	} else {
		r0 = ret.Get(0).(domain.LendBook)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.LendBook) error); ok {
		r1 = rf(ctx, lb)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBook provides a mock function with given fields: ctx, b
func (_m *BookRepositoryInterface) ListBook(ctx context.Context, b domain.Book) (domain.Book, error) {
	ret := _m.Called(ctx, b)

	var r0 domain.Book
	if rf, ok := ret.Get(0).(func(context.Context, domain.Book) domain.Book); ok {
		r0 = rf(ctx, b)
	} else {
		r0 = ret.Get(0).(domain.Book)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Book) error); ok {
		r1 = rf(ctx, b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBorrowBook provides a mock function with given fields: ctx, bb
func (_m *BookRepositoryInterface) ListBorrowBook(ctx context.Context, bb domain.BorrowBook) (domain.BorrowBook, error) {
	ret := _m.Called(ctx, bb)

	var r0 domain.BorrowBook
	if rf, ok := ret.Get(0).(func(context.Context, domain.BorrowBook) domain.BorrowBook); ok {
		r0 = rf(ctx, bb)
	} else {
		r0 = ret.Get(0).(domain.BorrowBook)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.BorrowBook) error); ok {
		r1 = rf(ctx, bb)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLendBook provides a mock function with given fields: ctx, lb
func (_m *BookRepositoryInterface) ListLendBook(ctx context.Context, lb domain.LendBook) (domain.LendBook, error) {
	ret := _m.Called(ctx, lb)

	var r0 domain.LendBook
	if rf, ok := ret.Get(0).(func(context.Context, domain.LendBook) domain.LendBook); ok {
		r0 = rf(ctx, lb)
	} else {
		r0 = ret.Get(0).(domain.LendBook)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.LendBook) error); ok {
		r1 = rf(ctx, lb)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBook provides a mock function with given fields: ctx, b, BookID
func (_m *BookRepositoryInterface) UpdateBook(ctx context.Context, b domain.Book, BookID string) (domain.Book, error) {
	ret := _m.Called(ctx, b, BookID)

	var r0 domain.Book
	if rf, ok := ret.Get(0).(func(context.Context, domain.Book, string) domain.Book); ok {
		r0 = rf(ctx, b, BookID)
	} else {
		r0 = ret.Get(0).(domain.Book)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Book, string) error); ok {
		r1 = rf(ctx, b, BookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBookRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewBookRepositoryInterface creates a new instance of BookRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBookRepositoryInterface(t mockConstructorTestingTNewBookRepositoryInterface) *BookRepositoryInterface {
	mock := &BookRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
