// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "golang-mentoring/project-1/albertafriadii/pkg/domain"

	mock "github.com/stretchr/testify/mock"
)

// UserUsecaseInterface is an autogenerated mock type for the UserUsecaseInterface type
type UserUsecaseInterface struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, u
func (_m *UserUsecaseInterface) CreateUser(ctx context.Context, u *domain.Users) (*domain.Users, error) {
	ret := _m.Called(ctx, u)

	var r0 *domain.Users
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Users) *domain.Users); ok {
		r0 = rf(ctx, u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Users)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Users) error); ok {
		r1 = rf(ctx, u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, UserID
func (_m *UserUsecaseInterface) DeleteUser(ctx context.Context, UserID string) error {
	ret := _m.Called(ctx, UserID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, UserID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoginUser provides a mock function with given fields: ctx, req
func (_m *UserUsecaseInterface) LoginUser(ctx context.Context, req *domain.GetUser) (*domain.Result, error) {
	ret := _m.Called(ctx, req)

	var r0 *domain.Result
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetUser) *domain.Result); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetUser) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, existPassword, u, UserID
func (_m *UserUsecaseInterface) UpdateUser(ctx context.Context, existPassword string, u *domain.Users, UserID string) error {
	ret := _m.Called(ctx, existPassword, u, UserID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.Users, string) error); ok {
		r0 = rf(ctx, existPassword, u, UserID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserUsecaseInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserUsecaseInterface creates a new instance of UserUsecaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserUsecaseInterface(t mockConstructorTestingTNewUserUsecaseInterface) *UserUsecaseInterface {
	mock := &UserUsecaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
