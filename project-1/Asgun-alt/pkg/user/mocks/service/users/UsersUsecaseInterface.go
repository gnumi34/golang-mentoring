// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	users "github.com/gnumi34/golang-mentoring/tree/main/project-1/Asgun-alt/pkg/user/service/users"
	mock "github.com/stretchr/testify/mock"
)

// UsersUsecaseInterface is an autogenerated mock type for the UsersUsecaseInterface type
type UsersUsecaseInterface struct {
	mock.Mock
}

// AddUser provides a mock function with given fields: ctx, userDomain
func (_m *UsersUsecaseInterface) AddUser(ctx context.Context, userDomain users.UsersDomain) (users.UsersDomain, error) {
	ret := _m.Called(ctx, userDomain)

	var r0 users.UsersDomain
	if rf, ok := ret.Get(0).(func(context.Context, users.UsersDomain) users.UsersDomain); ok {
		r0 = rf(ctx, userDomain)
	} else {
		r0 = ret.Get(0).(users.UsersDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, users.UsersDomain) error); ok {
		r1 = rf(ctx, userDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *UsersUsecaseInterface) DeleteUser(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUser provides a mock function with given fields: ctx, userDomain
func (_m *UsersUsecaseInterface) GetUser(ctx context.Context, userDomain users.UsersDomain) (users.UsersDomain, error) {
	ret := _m.Called(ctx, userDomain)

	var r0 users.UsersDomain
	if rf, ok := ret.Get(0).(func(context.Context, users.UsersDomain) users.UsersDomain); ok {
		r0 = rf(ctx, userDomain)
	} else {
		r0 = ret.Get(0).(users.UsersDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, users.UsersDomain) error); ok {
		r1 = rf(ctx, userDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, userDomain
func (_m *UsersUsecaseInterface) Login(ctx context.Context, userDomain users.UsersDomain) (users.UsersDomain, error) {
	ret := _m.Called(ctx, userDomain)

	var r0 users.UsersDomain
	if rf, ok := ret.Get(0).(func(context.Context, users.UsersDomain) users.UsersDomain); ok {
		r0 = rf(ctx, userDomain)
	} else {
		r0 = ret.Get(0).(users.UsersDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, users.UsersDomain) error); ok {
		r1 = rf(ctx, userDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, userUpdateDomain
func (_m *UsersUsecaseInterface) UpdateUser(ctx context.Context, userUpdateDomain users.UsersDomain) (users.UsersDomain, error) {
	ret := _m.Called(ctx, userUpdateDomain)

	var r0 users.UsersDomain
	if rf, ok := ret.Get(0).(func(context.Context, users.UsersDomain) users.UsersDomain); ok {
		r0 = rf(ctx, userUpdateDomain)
	} else {
		r0 = ret.Get(0).(users.UsersDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, users.UsersDomain) error); ok {
		r1 = rf(ctx, userUpdateDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUsersUsecaseInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsersUsecaseInterface creates a new instance of UsersUsecaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsersUsecaseInterface(t mockConstructorTestingTNewUsersUsecaseInterface) *UsersUsecaseInterface {
	mock := &UsersUsecaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
