// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/auth/login": {
            "post": {
                "description": "If user is exists in the database, Generate and RETURN user token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Login"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "Login",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/books": {
            "get": {
                "description": "get book collections saved in the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "get all books"
                ],
                "summary": "get all book",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "get all books",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/books.BookCollections"
                            }
                        }
                    }
                }
            }
        },
        "/api/books/add": {
            "post": {
                "description": "Add new book to the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Add book"
                ],
                "summary": "Add new book",
                "parameters": [
                    {
                        "description": "Add book body request",
                        "name": "jsonBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/books.AddBookRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/books.BookCollections"
                        }
                    }
                }
            }
        },
        "/api/books/admin_lend_approval": {
            "post": {
                "description": "Admin lend book approval.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Lend book approval"
                ],
                "summary": "Admin Lend book approval",
                "parameters": [
                    {
                        "description": "lend book body request",
                        "name": "jsonBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/books.LendBookRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/books.LendBook"
                        }
                    }
                }
            }
        },
        "/api/books/borrow_book": {
            "post": {
                "description": "Borrow book from the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Borrow book"
                ],
                "summary": "Borrow book",
                "parameters": [
                    {
                        "description": "borrow book body request",
                        "name": "jsonBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/books.BorrowBookRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/books.BorrowedBook"
                        }
                    }
                }
            }
        },
        "/api/books/borrow_book_history/{id}": {
            "get": {
                "description": "Get borrowed book history based on user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Get borrowed book history"
                ],
                "summary": "Get borrowed book history",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "get borrowed book",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/books.BorrowedBook"
                            }
                        }
                    }
                }
            }
        },
        "/api/books/delete/{id}": {
            "delete": {
                "description": "Delete book from the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Delete book"
                ],
                "summary": "Delete book",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "delete book",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/books/lend_approval": {
            "post": {
                "description": "lend book approval.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lend book"
                ],
                "summary": "Lend book approval",
                "parameters": [
                    {
                        "description": "lend book body request",
                        "name": "jsonBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/books.LendBookRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/books.LendBook"
                        }
                    }
                }
            }
        },
        "/api/books/lend_book_history/{id}": {
            "get": {
                "description": "Get lend book history based on user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Get lend book history"
                ],
                "summary": "Get lend book history",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "get lend book",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/books.LendBook"
                            }
                        }
                    }
                }
            }
        },
        "/api/books/return_book/{id}": {
            "put": {
                "description": "Return book",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Return book"
                ],
                "summary": "Return book",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "return book",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "return book body request",
                        "name": "jsonBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/books.ReturnBookRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/books.ReturnBookResponse"
                        }
                    }
                }
            }
        },
        "/api/books/returned_book_history/{id}": {
            "get": {
                "description": "Get returned book history based on user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Get returned book history"
                ],
                "summary": "Get returned book history",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "get return book",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/books.BorrowedBook"
                            }
                        }
                    }
                }
            }
        },
        "/api/books/update": {
            "put": {
                "description": "Update book to the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Update book"
                ],
                "summary": "Update book",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "update book",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update book body request",
                        "name": "jsonBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/books.UpdateBookRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/books.BookCollections"
                        }
                    }
                }
            }
        },
        "/user/protected": {
            "get": {
                "description": "Protected route can only be accessed if the the user has valid JWT token.",
                "tags": [
                    "Protected"
                ],
                "summary": "Protected user route",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Insert your access token 'Bearer your_token'",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/users/": {
            "put": {
                "description": "Update the user to the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Update User"
                ],
                "summary": "Update User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Insert your access token 'Bearer your_token'",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Update User",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UpdateUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/users.UsersDomain"
                        }
                    }
                }
            },
            "post": {
                "description": "Add new user to the database, ID is generated by the API, password  is saved with BCrypt hash after passess validation.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Add User"
                ],
                "summary": "Add user",
                "parameters": [
                    {
                        "description": "Add User",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.AddUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/users.UsersDomain"
                        }
                    }
                }
            }
        },
        "/users/get-user": {
            "post": {
                "description": "validate username and password, if user is exists in the database RETURN valid user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Get User"
                ],
                "summary": "Show an account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Insert your access token 'Bearer your_token'",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "validate user",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.GetUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/users/{id}": {
            "delete": {
                "description": "Soft delete user by passing the user ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "(Soft) Delete User"
                ],
                "summary": "Delete User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Insert your access token 'Bearer your_token'",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "delete user",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.LoginUserRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "books.AddBookRequest": {
            "type": "object",
            "required": [
                "author",
                "book_stock",
                "publisher",
                "title"
            ],
            "properties": {
                "author": {
                    "type": "string"
                },
                "book_stock": {
                    "type": "integer"
                },
                "book_summary": {
                    "type": "string",
                    "maxLength": 500
                },
                "max_book_stock": {
                    "type": "integer"
                },
                "publisher": {
                    "type": "string",
                    "maxLength": 50
                },
                "title": {
                    "type": "string",
                    "maxLength": 50
                }
            }
        },
        "books.BookCollections": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "string"
                },
                "book_id": {
                    "type": "integer"
                },
                "book_stock": {
                    "type": "integer"
                },
                "book_summary": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "max_book_stock": {
                    "type": "integer"
                },
                "publisher": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "books.BorrowBookRequest": {
            "type": "object",
            "required": [
                "book_id",
                "user_id"
            ],
            "properties": {
                "book_id": {
                    "type": "integer"
                },
                "borrowedAt": {
                    "type": "string"
                },
                "dueDate": {
                    "type": "string"
                },
                "is_returned": {
                    "type": "boolean"
                },
                "notes": {
                    "type": "string",
                    "maxLength": 100
                },
                "returnedAt": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "books.BorrowedBook": {
            "type": "object",
            "properties": {
                "ID": {
                    "type": "integer"
                },
                "book_id": {
                    "type": "integer"
                },
                "books": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/books.BookCollections"
                    }
                },
                "borrowed_at": {
                    "type": "string"
                },
                "due_date": {
                    "type": "string"
                },
                "is_returned": {
                    "type": "boolean"
                },
                "notes": {
                    "type": "string"
                },
                "returned_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "books.LendBook": {
            "type": "object",
            "properties": {
                "ID": {
                    "type": "integer"
                },
                "book_id": {
                    "type": "integer"
                },
                "is_accepted": {
                    "type": "boolean"
                },
                "notes": {
                    "type": "string"
                },
                "requested_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "books.LendBookRequest": {
            "type": "object",
            "required": [
                "book_id",
                "user_id"
            ],
            "properties": {
                "book_id": {
                    "type": "integer"
                },
                "is_accepted": {
                    "type": "boolean"
                },
                "notes": {
                    "type": "string",
                    "maxLength": 100
                },
                "requested_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "books.ReturnBookRequest": {
            "type": "object",
            "required": [
                "username"
            ],
            "properties": {
                "book_id": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "books.ReturnBookResponse": {
            "type": "object",
            "properties": {
                "borrowed_books": {
                    "$ref": "#/definitions/books.BookCollections"
                },
                "late_charge": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "books.UpdateBookRequest": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "author": {
                    "type": "string"
                },
                "book_stock": {
                    "type": "integer"
                },
                "book_summary": {
                    "type": "string",
                    "maxLength": 500
                },
                "id": {
                    "type": "integer"
                },
                "max_book_stock": {
                    "type": "integer"
                },
                "publisher": {
                    "type": "string",
                    "maxLength": 50
                },
                "title": {
                    "type": "string",
                    "maxLength": 50
                }
            }
        },
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "request.AddUser": {
            "type": "object",
            "required": [
                "email",
                "password_1",
                "password_2",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password_1": {
                    "type": "string",
                    "minLength": 8
                },
                "password_2": {
                    "type": "string",
                    "minLength": 8
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "request.GetUser": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "request.UpdateUser": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "old_password": {
                    "type": "string"
                },
                "password_1": {
                    "type": "string"
                },
                "password_2": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "users.UsersDomain": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8000",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Go Echo Library Management",
	Description:      "a simple Go library management with echo framework",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
